a.float-right.btn.btn-secondary href="#{Routes.checks_path(@socket, :new)}" New check

h2 Checks

= form_for :filters, "", [phx_change: "filter-checks", csrf_token: "", class: "form-inline form-filters"], fn f ->
  .form-group.col-4.offset-4
    = text_input f, "check_title", placeholder: "Search for a check...", autofocus: true, value: assigns[:filter_check_title], class: "form-control"
  .form-group.col-4
    = select f, "group_id", Enum.map(@groups, fn group -> {group.title, group.id} end), prompt: "All groups...", value: assigns[:filter_group_id], class: "custom-select"

.block
  table.table
    thead.thead-light
      tr
        th
        th.fill Check name
        th Type
        th Last/next run
        th.fit
    
    tbody
      = for check <- @checks do
        = with status <- last_check_status(check) do
          tr class="enabled-#{check.enabled} #{unless status, do: "table-danger", else: ""}"
            td
              .status
                = if status do
                  .led.status-operational
                - else
                  .led.status-outages
            td
              a href="#{Routes.checks_path(@socket, :show, check.uuid)}": b = check.title
              br
              = check.group.title
            td: code.check-type = check.kind
            td: p
              b = last_check_at(check)
              br
              small = next_check_at(check)
            td.actions
              a.btn.btn-secondary.btn-sm.mr-1 href="#{Routes.checks_path(@socket, :edit, check.uuid)}" Edit
              = link("Delete", to: Routes.checks_path(@socket, :delete, check.uuid), method: :delete, csrf_token: @csrf_token, class: "btn btn-sm btn-danger")